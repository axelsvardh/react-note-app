[{"/Users/axelsvardh/Sites/note-react/notes/src/index.js":"1","/Users/axelsvardh/Sites/note-react/notes/src/App.js":"2","/Users/axelsvardh/Sites/note-react/notes/src/utils/noteHelpers.js":"3","/Users/axelsvardh/Sites/note-react/notes/src/components/List.js":"4","/Users/axelsvardh/Sites/note-react/notes/src/components/Form.js":"5"},{"size":193,"mtime":1607014688348,"results":"6","hashOfConfig":"7"},{"size":1606,"mtime":1607959755462,"results":"8","hashOfConfig":"7"},{"size":1572,"mtime":1607619294342,"results":"9","hashOfConfig":"7"},{"size":787,"mtime":1607617713402,"results":"10","hashOfConfig":"7"},{"size":1983,"mtime":1607604069933,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ve3jgb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"14"},"/Users/axelsvardh/Sites/note-react/notes/src/index.js",[],["28","29"],"/Users/axelsvardh/Sites/note-react/notes/src/App.js",["30","31","32"],"import 'bootstrap/dist/css/bootstrap.min.css'\nimport React, {useState, useEffect} from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport List from './components/List'\nimport Form from './components/Form'\nimport {getNotes, createNote} from './utils/noteHelpers'\nimport * as N from './utils/noteHelpers'\n\nfunction App() {\n  const [selectedNote, setSelectedNote] = useState(undefined)\n  const [notes, setNotes] = useState([])\n\n  useEffect(() => {\n    const notes = getNotes()\n    setNotes(notes)\n  }, [])\n\n  const refreshList = () => {\n    const notes = getNotes()\n    setSelectedNote(undefined)\n    setNotes([...notes])\n  }\n\n  const onClickNewNote = () => setSelectedNote(undefined)\n\n  const jsonNoteArray = JSON.stringify(notes)\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col className=\"p-5\" style={{backgroundColor: 'lightblue', fontSize: '40px'}} xs={12}>\n            Notes\n          </Col>\n          <Col style={{backgroundColor: 'lightgreen'}} xs={12} md={4}>\n            <Button onClick={onClickNewNote} className=\"my-3\" variant=\"dark\" size=\"md\" block>\n              New Note\n            </Button>\n            <List notes={notes} selectedNote={selectedNote} setSelectedNote={setSelectedNote} />\n          </Col>\n          <Col style={{backgroundColor: 'lightgrey'}} xs={12} md={8}>\n            <Form refreshList={refreshList} selectedNote={selectedNote} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","/Users/axelsvardh/Sites/note-react/notes/src/utils/noteHelpers.js",["33"],"// C: Create a note\n// R: Read (get) a note\n// U: Update a note\n// D: Delete a note\n\nlocalStorage.setItem('notes', '[]')\nconst test = localStorage.getItem('notes')\n\n// const notes = [\n//   {id: 1, title: 'hello', body: 'hejhejhej'},\n//   {id: 2, title: 'another note', body: 'hallåhallåhallå'},\n//   {id: 3, title: 'new notes', body: 'tjenatjenatjena'},\n// ]\n// const notes = [{id: '123', title: 'another note', body: 'new note'}]\n\nexport function getNotes() {\n  const Axelsnote = localStorage.getItem('notes')\n  const parsedNotes = JSON.parse(Axelsnote)\n  return parsedNotes\n}\n\nexport function createNote(title, body) {\n  const notes = getNotes()\n  const note = {id: Date.now(), title, body}\n  notes.push(note)\n  console.log('about to save', notes)\n  const jsonNoteArray = JSON.stringify(notes)\n  localStorage.setItem('notes', jsonNoteArray)\n}\n\nexport function getNote(id) {\n  const notes = getNotes()\n  return notes.find((note) => note.id === id)\n}\n\nexport function updateNote(id, title, body) {\n  const notes = getNotes()\n  const indexToUpdate = notes.findIndex((note) => note.id === id)\n  const note = {\n    id,\n    title,\n    body,\n  }\n\n  notes.splice(indexToUpdate, 1)\n  notes.splice(0, 0, note)\n  return note\n  //notes.find(element => element.id === id || element => element.title )\n}\n\n// const payload = {id: 3, title: 'hello', body: ''}\n// updateNote(payload)\n\nexport function deleteNote(id) {\n  const notes = getNotes()\n  const indexToDelete = notes.findIndex((note) => note.id === id)\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1)\n  return true\n}\n",["34","35"],"/Users/axelsvardh/Sites/note-react/notes/src/components/List.js",["36","37","38","39","40","41"],"import React, {useState, useEffect} from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Form from '../components/Form'\nimport {getNotes, createNote} from '../utils/noteHelpers'\n\n/*\n  - highlight \n  - send note object as props to Form\n*/\n\nexport default function List({selectedNote, setSelectedNote, notes}) {\n  const jsonNoteArray = JSON.stringify(notes)\n  const onSelectNote = (note) => {\n    setSelectedNote(note)\n  }\n  console.log('notes', notes)\n  return (\n    <ListGroup as=\"ul\">\n      {notes.map((note, index) => (\n        <ListGroup.Item\n          active={selectedNote ? note.id === selectedNote.id : null}\n          onClick={() => onSelectNote(note)}\n          as=\"li\"\n        >\n          {note.title}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  )\n}\n","/Users/axelsvardh/Sites/note-react/notes/src/components/Form.js",["42","43","44","45"],"import React, {useState, useEffect} from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {createNote, getNotes, updateNote, deleteNote} from '../utils/noteHelpers'\n\nconst STATUS_INITIAL_VALUE = ''\n\nexport default function F({selectedNote, setSelectedNote, refreshList}) {\n  const [title, setTitle] = useState('')\n  const [isSaved, setIsSaved] = useState(false)\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE)\n\n  useEffect(() => {\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 5000)\n  }, [status])\n\n  useEffect(() => {\n    if (selectedNote) return setTitle(selectedNote.title)\n    setTitle('')\n  }, [selectedNote])\n\n  const [body, setBody] = useState('')\n  const onSetTitle = (e) => setTitle(e.target.value)\n  const onSetBody = (e) => setBody(e.target.value)\n\n  const onSave = () => {\n    setTitle('')\n    setStatus('SAVED!')\n    if (selectedNote) {\n      updateNote(selectedNote.id, title)\n      return refreshList()\n    }\n\n    createNote(title, '')\n    refreshList()\n  }\n\n  // how to disable reload button click\n  // const onSave = (e) => {\n  //   e.preventDefault()\n  // }\n\n  const onDelete = () => {\n    const {id} = selectedNote\n    deleteNote(id)\n    refreshList()\n    setTitle('')\n    setStatus('DELETED!')\n  }\n\n  return (\n    <Form className=\"m-4\">\n      <Form.Label>Title</Form.Label>\n      <Form.Control\n        onChange={onSetTitle}\n        // value={selectedNote ? selectedNote.title : title}\n        value={title}\n        className=\"mb-3\"\n        placeholder=\"Enter title\"\n        size=\"lg\"\n      />\n      <Form.Label>Note</Form.Label>\n      <Form.Control onChange={onSetBody} as=\"textarea\" size=\"lg\" placeholder=\"Enter note\" />\n\n      <Button onClick={onSave} variant=\"primary\" className=\"m-4\">\n        Save\n      </Button>\n      {selectedNote && (\n        <Button onClick={onDelete} variant=\"danger\">\n          Delete\n        </Button>\n      )}\n      {status && <p>{status}</p>}\n    </Form>\n  )\n}\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":9,"column":19,"nodeType":"52","messageId":"53","endLine":9,"endColumn":29},{"ruleId":"50","severity":1,"message":"54","line":10,"column":13,"nodeType":"52","messageId":"53","endLine":10,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":29,"column":9,"nodeType":"52","messageId":"53","endLine":29,"endColumn":22},{"ruleId":"50","severity":1,"message":"56","line":7,"column":7,"nodeType":"52","messageId":"53","endLine":7,"endColumn":11},{"ruleId":"46","replacedBy":"57"},{"ruleId":"48","replacedBy":"58"},{"ruleId":"50","severity":1,"message":"59","line":1,"column":16,"nodeType":"52","messageId":"53","endLine":1,"endColumn":24},{"ruleId":"50","severity":1,"message":"60","line":1,"column":26,"nodeType":"52","messageId":"53","endLine":1,"endColumn":35},{"ruleId":"50","severity":1,"message":"61","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":12},{"ruleId":"50","severity":1,"message":"62","line":4,"column":9,"nodeType":"52","messageId":"53","endLine":4,"endColumn":17},{"ruleId":"50","severity":1,"message":"51","line":4,"column":19,"nodeType":"52","messageId":"53","endLine":4,"endColumn":29},{"ruleId":"50","severity":1,"message":"55","line":12,"column":9,"nodeType":"52","messageId":"53","endLine":12,"endColumn":22},{"ruleId":"50","severity":1,"message":"62","line":4,"column":21,"nodeType":"52","messageId":"53","endLine":4,"endColumn":29},{"ruleId":"50","severity":1,"message":"63","line":10,"column":10,"nodeType":"52","messageId":"53","endLine":10,"endColumn":17},{"ruleId":"50","severity":1,"message":"64","line":10,"column":19,"nodeType":"52","messageId":"53","endLine":10,"endColumn":29},{"ruleId":"50","severity":1,"message":"65","line":22,"column":10,"nodeType":"52","messageId":"53","endLine":22,"endColumn":14},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'createNote' is defined but never used.","Identifier","unusedVar","'N' is defined but never used.","'jsonNoteArray' is assigned a value but never used.","'test' is assigned a value but never used.",["66"],["67"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Form' is defined but never used.","'getNotes' is defined but never used.","'isSaved' is assigned a value but never used.","'setIsSaved' is assigned a value but never used.","'body' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]